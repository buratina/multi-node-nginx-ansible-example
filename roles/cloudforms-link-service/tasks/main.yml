---
- name: debug manageiq object
  debug:
    var: manageiq

- name: debug service id
  debug:
    msg: "manage iq service id: {{ manageiq.service }}"

#- name: set the manageiq connection variable
#  set_fact:
#    manageiq_connection:
#      url: "{{ manageiq.api_url }}"
#      token: "{{ manageiq.api_token }}"
#      manageiq_validate_certs: False
#      force_basic_auth: False
#      username: ''
#      password: ''
#      group: ''
#      X_MIQ_Group: ''
#      client_cert: ''
#      client_key: ''
#
#- name: get a vmdb object
#  manageiq_vmdb:
#    href: "{{ manageiq.service }}"
#  register: vmdb_object
#
#- name: link service via an object
#  manageiq_vmdb:
#    vmdb: "{{ vmdb_object }}"
#    action: add_provider_vms
#    data:
#      uid_ems:
#        - "{{ item.instance.hw_product_uuid }}"
#      provider:
#        id: "{{ provider_id }}"
#  with_items: "{{ instances.results }}"
#  when: item.instance is defined

- name: Lookup CloudForms VM via uid_ems
  uri:
    url: "{{ manageiq.api_url }}/api/vms?filter[]=uid_ems={{ item.instance.hw_product_uuid }}&expand=resources"
    method: GET
    body:
      action: refresh
    body_format: json
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: lookup_vms_output
  until: lookup_vms_output.json.subcount > 0
  retries: "{{ max_retries }}"
  delay: "{{ retry_interval }}"
  with_items: "{{ instances.results }}"

- debug: var=lookup_vms_output.results
  when: verbose

- name: Set the service URL
  set_fact:
    svc_url: "/api/{{ manageiq.service }}"

- name: Log svc_url
  debug: var=svc_url
  when: verbose

- name: Initialize an empty list for vms
  set_fact:
    vms: []

- debug: var=empty_list
  when: verbose

- name: Append resource href to vms list
  set_fact:
    vms: "{{ vms }} + [ { 'href': svc_url, 'resource': { 'href': '/api/vms/{{ item.json.resources[0].id }}' } } ]"
  with_items: "{{ lookup_vms_output.results }}"

- name: Log vms
  debug: var=vms
  when: verbose

- name: Add vms to the service
  uri:
    url: "{{ manageiq.api_url }}/api/services"
    method: POST
    body_format: json
    body:
      action: add_resource
      resources: "{{ vms }}"
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: add_output

- name: Log add_output
  debug: var=add_output.json.results[0].success
  when: verbose

- name: Check if the VM was successfully attached to service
  fail: msg="{{ add_output.json.results[0].message }}"
  when: add_output.json.results[0].success == false

- name: Assign tag to CloudForms service "{{ category }}:{{ tag }}"
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}/tags"
    method: POST
    body_format: json
    body:
      action: assign
      resources:
        - category: "{{ category }}"
          name: "{{ tag }}"
        - category: application
          name: lamp
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: tag_service_output

- name: Log tag_service_output
  debug: var=tag_service_output
  when: verbose

- name: debug vm names
  debug:
    var: item.json.resources[0]
  with_items: "{{ lookup_vms_output.results }}"

- name: Initialize an empty list for tagged_vms
  set_fact:
    tagged_vms: []

- name: generate tags for webserver
  set_fact:
    tagged_vms: "{{ tagged_vms }} + [ { 'id': '{{ item.json.resources[0].id }}', 'app_name': 'webserver' } ]"
  with_items: "{{ lookup_vms_output.results }}"
  when: ('web' in item.json.resources[0].name)

- name: generate tags for dbserver
  set_fact:
    tagged_vms: "{{ tagged_vms }} + [ { 'id': '{{ item.json.resources[0].id }}', 'app_name': 'dbserver' } ]"
  with_items: "{{ lookup_vms_output.results }}"
  when: ('db' in item.json.resources[0].name)

- name: generate tags for lbserver
  set_fact:
    tagged_vms: "{{ tagged_vms }} + [ { 'id': '{{ item.json.resources[0].id }}', 'app_name': 'lbserver' } ]"
  with_items: "{{ lookup_vms_output.results }}"
  when: ('haproxy' in item.json.resources[0].name)

- name: debug tagged_vms
  debug:
    var: tagged_vms

- name: Assign CF tag to VM
  uri:
    url: "{{ manageiq.api_url }}/api/vms/{{ item.id }}/tags"
    method: POST
    body:
      action: assign
      resources:
        - category: "{{ category }}"
          name: "{{ tag }}"
        - category: "application"
          name: "{{ item.app_name }}"
    body_format: json
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: assign_vmtag_output
  with_items: "{{ tagged_vms }}"

- name: Log assign_vmtag_output
  debug: var=assign_vmtag_output.results
  when: verbose

- name: Lookup CloudForms userid
  uri:
    url: "{{ manageiq.api_url }}/api/{{ manageiq.user }}?attributes=userid"
    method: GET
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: lookup_user_output

- name: Log lookup_user_output
  debug: var=lookup_user_output
  when: verbose

- name: Setting CloudForms userid
  set_fact:
    userid: "{{ lookup_user_output.json.userid }}"

- name: Log userid
  debug: var=userid
  when: verbose

- name: Assign CloudForms userid to VM
  uri:
    url: "{{ item.json.resources[0].href }}"
    method: POST
    body:
      action: set_owner
      resource:
        owner: "{{ userid }}"
    body_format: json
    validate_certs: false
    headers:
      X-Auth-Token: "{{ manageiq.api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: assign_cfowner_output
  with_items: "{{ lookup_vms_output.results }}"

- name: Log assign_cfowner_output
  debug: var=assign_cfowner_output
  when: verbose

